<launch>
    <arg name="controllers" default="joint_state_controller pos_joint_traj_controller gripper_action_controller"/>
    <arg name="stopped_controllers" default="cartesian_motion_controller motion_control_handle cartesian_force_controller cartesian_compliance_controller"/>
    <arg name="controller_config_file" default="$(find homestri_fake)/config/a_bot_controllers.yaml" />
    <arg name="moveit_controller_config_file" default="$(find homestri_fake)/config/a_bot_moveit_controllers.yaml" />
    <arg name="hw_config_file" default="$(find homestri_fake)/config/a_bot_hw.yaml" />
    <arg name="urdf_path" default="$(find homestri_description)/urdf/scenes/a_bot_scene.xacro"/>
    <arg name="use_rviz" default="true" />

    <!-- Set the robot urdf on the parameter server -->
    <param name="robot_description" command="$(find xacro)/xacro '$(arg urdf_path)'"/>

    <!-- Robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"/>

    <!-- Control motion and compliance controller with one handle -->
    <remap from="motion_control_handle/target_frame" to="target_frame" />
    <remap from="cartesian_motion_controller/target_frame" to="target_frame" />
    <remap from="cartesian_compliance_controller/target_frame" to="target_frame" />
    <!-- Control wrenches via one topic -->
    <remap from="cartesian_force_controller/target_wrench" to="target_wrench" />
    <remap from="cartesian_compliance_controller/target_wrench" to="target_wrench" />
    <!-- Load hardware configuration -->
    <rosparam file="$(arg hw_config_file)" command="load"/>
    <!-- Load hardware interface -->
    <node name="sim_hardware_interface" pkg="ros_control_boilerplate" type="sim_hw_main" output="screen"/>

    <!-- Load the controller parameters onto the parameter server -->
    <rosparam file="$(arg controller_config_file)" />

    <!-- spawn controller manager -->
    <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" args="$(arg controllers)" />

    <!-- load other controller -->
    <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" args="--stopped $(arg stopped_controllers)" unless="$(eval arg('stopped_controllers') == '')"/>

    <!-- compliant trajectory action server -->
    <remap from="compliant_traj_action_server/target_wrench" to="target_wrench" />
    <remap from="compliant_traj_action_server/target_frame" to="target_frame" />
    <node 
        name="compliant_traj_action_server" 
        pkg="compliant_trajectory_control" 
        type="follow_compliant_trajectory_action_server" 
        output="screen"
    />

    <!-- launch moveit -->
    <include file="$(find homestri_a_bot_moveit_config)/launch/move_group.launch">
        <arg name="moveit_controller_manager" value="simple" />
        <arg name="load_robot_description" value="false"/>
    </include>
    <!-- Load moveit controller list to the parameter server -->
    <rosparam file="$(arg moveit_controller_config_file)" ns="move_group"/>

    <!-- launch rviz -->
    <group if="$(arg use_rviz)">
        <arg name="my_rviz" value="-d $(find homestri_fake)/rviz/a_bot_fake.rviz" />
        <node name="rviz" pkg="rviz" type="rviz" respawn="false" args="$(arg my_rviz)" output="screen" />
    </group>

    <!-- launch simple planning interface -->
    <include file="$(find homestri_planning_interface)/launch/planning_interface.launch">
    </include>
    
</launch>
