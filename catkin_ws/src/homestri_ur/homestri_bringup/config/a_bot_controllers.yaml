# Settings for ros_control control loop
hardware_control_loop:
  loop_hz: &loop_hz 500

# Settings for ros_control hardware interface
ur_hardware_interface:
  joints: &robot_joints
    - shoulder_pan_joint
    - shoulder_lift_joint
    - elbow_joint
    - wrist_1_joint
    - wrist_2_joint
    - wrist_3_joint

# Publish all joint states ----------------------------------
joint_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: *loop_hz

# Publish wrench ----------------------------------
force_torque_sensor_controller:
  type: force_torque_sensor_controller/LowPassForceTorqueSensorController  # Specify the controller type as LowPassForceTorqueSensorController
  name: wrench  # Specify the name of the force torque sensor interface to be published
  low_pass_filter_coeff: 1000 # coefficient for filter strength, higher value -> more filtering 
  publish_rate: *loop_hz

# Publish speed_scaling factor
speed_scaling_state_controller:
  type: scaled_controllers/SpeedScalingStateController
  publish_rate: *loop_hz

# Joint Trajectory Controller - position based -------------------------------
# For detailed explanations of parameter see http://wiki.ros.org/joint_trajectory_controller
scaled_pos_joint_traj_controller:
  type: position_controllers/ScaledJointTrajectoryController
  joints: *robot_joints
  constraints:
    goal_time: 0.6
    stopped_velocity_tolerance: 0.05
    shoulder_pan_joint: { trajectory: 0.2, goal: 0.1 }
    shoulder_lift_joint: { trajectory: 0.2, goal: 0.1 }
    elbow_joint: { trajectory: 0.2, goal: 0.1 }
    wrist_1_joint: { trajectory: 0.2, goal: 0.1 }
    wrist_2_joint: { trajectory: 0.2, goal: 0.1 }
    wrist_3_joint: { trajectory: 0.2, goal: 0.1 }
  stop_trajectory_duration: 0.5
  state_publish_rate: *loop_hz
  action_monitor_rate: 20

pos_joint_traj_controller:
  type: position_controllers/JointTrajectoryController
  joints: *robot_joints
  constraints:
    goal_time: 0.6
    stopped_velocity_tolerance: 0.05
    shoulder_pan_joint: { trajectory: 0.2, goal: 0.1 }
    shoulder_lift_joint: { trajectory: 0.2, goal: 0.1 }
    elbow_joint: { trajectory: 0.2, goal: 0.1 }
    wrist_1_joint: { trajectory: 0.2, goal: 0.1 }
    wrist_2_joint: { trajectory: 0.2, goal: 0.1 }
    wrist_3_joint: { trajectory: 0.2, goal: 0.1 }
  stop_trajectory_duration: 0.5
  state_publish_rate: *loop_hz
  action_monitor_rate: 20

scaled_vel_joint_traj_controller:
  type: velocity_controllers/ScaledJointTrajectoryController
  joints: *robot_joints
  constraints:
    goal_time: 0.6
    stopped_velocity_tolerance: 0.05
    shoulder_pan_joint: { trajectory: 0.1, goal: 0.1 }
    shoulder_lift_joint: { trajectory: 0.1, goal: 0.1 }
    elbow_joint: { trajectory: 0.1, goal: 0.1 }
    wrist_1_joint: { trajectory: 0.1, goal: 0.1 }
    wrist_2_joint: { trajectory: 0.1, goal: 0.1 }
    wrist_3_joint: { trajectory: 0.1, goal: 0.1 }
  gains:
    #!!These values have not been optimized!!
    shoulder_pan_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
    shoulder_lift_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
    elbow_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
    wrist_1_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
    wrist_2_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
    wrist_3_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
  # Use a feedforward term to reduce the size of PID gains
  velocity_ff:
    shoulder_pan_joint: 1.0
    shoulder_lift_joint: 1.0
    elbow_joint: 1.0
    wrist_1_joint: 1.0
    wrist_2_joint: 1.0
    wrist_3_joint: 1.0
  stop_trajectory_duration: 0.5
  state_publish_rate: *loop_hz
  action_monitor_rate: 20

vel_joint_traj_controller:
  type: velocity_controllers/JointTrajectoryController
  joints: *robot_joints
  constraints:
    goal_time: 0.6
    stopped_velocity_tolerance: 0.05
    shoulder_pan_joint: { trajectory: 0.1, goal: 0.1 }
    shoulder_lift_joint: { trajectory: 0.1, goal: 0.1 }
    elbow_joint: { trajectory: 0.1, goal: 0.1 }
    wrist_1_joint: { trajectory: 0.1, goal: 0.1 }
    wrist_2_joint: { trajectory: 0.1, goal: 0.1 }
    wrist_3_joint: { trajectory: 0.1, goal: 0.1 }
  gains:
    #!!These values have not been optimized!!
    shoulder_pan_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
    shoulder_lift_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
    elbow_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
    wrist_1_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
    wrist_2_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
    wrist_3_joint: { p: 5.0, i: 0.05, d: 0.1, i_clamp: 1 }
  # Use a feedforward term to reduce the size of PID gains
  velocity_ff:
    shoulder_pan_joint: 1.0
    shoulder_lift_joint: 1.0
    elbow_joint: 1.0
    wrist_1_joint: 1.0
    wrist_2_joint: 1.0
    wrist_3_joint: 1.0
  stop_trajectory_duration: 0.5
  state_publish_rate: *loop_hz
  action_monitor_rate: 20

# Pass an array of joint velocities directly to the joints
joint_group_vel_controller:
  type: velocity_controllers/JointGroupVelocityController
  joints: *robot_joints

forward_joint_traj_controller:
  type: "pass_through_controllers/JointTrajectoryController"
  joints: *robot_joints

forward_cartesian_traj_controller:
  type: "pass_through_controllers/CartesianTrajectoryController"
  joints: *robot_joints

twist_controller:
  type: "ros_controllers_cartesian/TwistController"
  frame_id: "tool0_controller"
  publish_rate: *loop_hz
  joints: *robot_joints

pose_based_cartesian_traj_controller:
  type: pose_controllers/CartesianTrajectoryController

  # UR driver convention
  base: base
  tip: tool0_controller
  joints: *robot_joints

joint_based_cartesian_traj_controller:
  type: position_controllers/CartesianTrajectoryController

  # UR driver convention
  base: base
  tip: tool0
  joints: *robot_joints

robot_status_controller:
  type: industrial_robot_status_controller/IndustrialRobotStatusController
  handle_name: industrial_robot_status_handle
  publish_rate: 10

motion_control_handle:
  type: "cartesian_controllers/MotionControlHandle"
  end_effector_link: "tcp_link"
  robot_base_link: "base_link"
  target_frame_topic: "/motion_control_handle/target_frame"
  joints: *robot_joints

cartesian_motion_controller:
  type: "position_controllers/CartesianMotionController"
  end_effector_link: "tcp_link"
  robot_base_link: "base_link"
  target_frame_topic: "target_frame"
  joints: *robot_joints

  pd_gains:
    trans_x: { p: 10.0 }
    trans_y: { p: 10.0 }
    trans_z: { p: 10.0 }
    rot_x: { p: 1.0 }
    rot_y: { p: 1.0 }
    rot_z: { p: 1.0 }

cartesian_force_controller:
  type: "velocity_controllers/CartesianForceController"
  end_effector_link: "tcp_link"
  robot_base_link: "base_link"
  ft_sensor_ref_link: "wrist_3_link"
  joints: *robot_joints

  solver:
    error_scale: 1.0

  pd_gains:
    trans_x: { p: 0.1 }
    trans_y: { p: 0.1 }
    trans_z: { p: 0.1 }
    rot_x: { p: 1.0 }
    rot_y: { p: 1.0 }
    rot_z: { p: 1.0 }

cartesian_compliance_controller:
  type: "velocity_controllers/CartesianComplianceController"
  end_effector_link: "tcp_link"
  robot_base_link: "base_link"
  ft_sensor_ref_link: "wrist_3_link"
  compliance_ref_link: "tcp_link"
  target_frame_topic: "target_frame"
  joints: *robot_joints

  stiffness: # w.r.t. compliance_ref_link
    trans_x: 100
    trans_y: 100
    trans_z: 100
    rot_x: 5
    rot_y: 5
    rot_z: 5

  solver:
    error_scale: 1.0

  pd_gains:
    trans_x: { p: 0.2 }
    trans_y: { p: 0.2 }
    trans_z: { p: 0.2 }
    rot_x: { p: 2.0 }
    rot_y: { p: 2.0 }
    rot_z: { p: 2.0 }

cartesian_traj_publisher:
  type: cartesian_trajectory_publisher/CartesianTrajectoryPublisher
  base: base_link
  tip: tcp_link
  joints: *robot_joints

compliant_traj_action_server:
  controller: cartesian_traj_publisher
  path_tolerance:
    pose_error: {trans_x: 0.3, trans_y: 0.3, trans_z: 0.3, rot_x: 1.0, rot_y: 1.0, rot_z: 1.0}
    twist_error: {trans_x: 1000000, trans_y: 1000000, trans_z: 1000000, rot_x: 1000000, rot_y: 1000000, rot_z: 1000000}
    accel_error: {trans_x: 1000000, trans_y: 1000000, trans_z: 1000000, rot_x: 1000000, rot_y: 1000000, rot_z: 1000000}
  goal_tolerance:
    pose_error: {trans_x: 0.2, trans_y: 0.2, trans_z: 0.2, rot_x: 0.5, rot_y: 0.5, rot_z: 0.5}
    twist_error: {trans_x: 1000000, trans_y: 1000000, trans_z: 1000000, rot_x: 1000000, rot_y: 1000000, rot_z: 1000000}
    accel_error: {trans_x: 1000000, trans_y: 1000000, trans_z: 1000000, rot_x: 1000000, rot_y: 1000000, rot_z: 1000000}
  goal_time_tolerance: 3.0